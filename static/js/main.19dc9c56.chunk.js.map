{"version":3,"sources":["services/API.js","context/StarWarsContext.js","context/StarWarsProvider.js","components/Table.js","components/SearchImput.js","components/ComparisonInput.js","App.js","index.js"],"names":["fetchStarWars","a","fetch","response","json","lists","results","StarWarsContext","createContext","StarWarsProvider","children","useState","data","setData","filterByName","name","filterByNumericValues","column","comparison","value","filters","setFilters","getData","planets","Provider","getFilterName","nameInput","Table","useContext","useEffect","className","filter","element","Number","tableFilter","e","toLowerCase","includes","map","planet","rotation_period","orbital_period","diameter","climate","gravity","terrain","terraini","surface_water","population","films","created","edited","url","SearchInput","htmlFor","data-testid","type","onChange","target","ComparisonInputs","localColumn","setLocalColumn","localComparison","setLocalComparison","localValue","setLocalValue","onClick","App","ComparisonInput","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.19dc9c56.chunk.js","sourcesContent":["const fetchStarWars = async () => {\n  const response = await fetch('https://swapi-trybe.herokuapp.com/api/planets/');\n  const json = await response.json();\n  const lists = json.results;\n  return lists;\n};\n\nexport default fetchStarWars;","import { createContext } from 'react';\n\nconst StarWarsContext = createContext();\n\nexport default StarWarsContext;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport fetchStarWars from '../services/API';\nimport StarWarsContext from './StarWarsContext';\n\nfunction StarWarsProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValues: [\n      {\n        column: '',\n        comparison: '',\n        value: 0,\n      },\n    ],\n  });\n\n  const getData = async () => {\n    const planets = await fetchStarWars();\n    setData(planets);\n  };\n\n  const getFilterName = (nameInput) => {\n    setFilters({\n      ...filters,\n      filterByName: {\n        name: nameInput,\n      },\n    });\n  };\n\n  return (\n    <StarWarsContext.Provider\n      value={ {\n        data,\n        getData,\n        getFilterName,\n        setFilters,\n        filters,\n        name: filters.filterByName.name,\n        column: filters.filterByNumericValues[0].column,\n        comparison: filters.filterByNumericValues[0].comparison,\n        value: filters.filterByNumericValues[0].value,\n      } }\n    >\n      {children}\n    </StarWarsContext.Provider>\n  );\n}\n\nStarWarsProvider.propTypes = {\n  children: propTypes.func.isRequired,\n};\n\nexport default StarWarsProvider;","import React, { useContext, useEffect } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport '../style/table.css';\n\nfunction Table() {\n  const { column, value, comparison, data, getData, name } = useContext(StarWarsContext);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const tableFilter = (element) => {\n    if (comparison === '') return true;\n    if (comparison === 'Bigger Then') return Number(element[column]) > Number(value);\n    if (comparison === 'Less Than') return Number(element[column]) < Number(value);\n    if (comparison === 'Equal To') return Number(element[column]) === Number(value);\n  };\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Rotation Period</th>\n          <th>Orbital Period</th>\n          <th>Diameter</th>\n          <th>Climate</th>\n          <th>Gravity</th>\n          <th>Terrain</th>\n          <th>Surface Water</th>\n          <th>Population</th>\n          <th>Films</th>\n          <th>Created</th>\n          <th>Edited</th>\n          <th>URL</th>\n        </tr>\n      </thead>\n      <tbody>\n        { data.filter((element) => tableFilter(element))\n          .filter((e) => e.name.toLowerCase()\n            .includes(name.toLowerCase()))\n          .map((planet) => (\n            <tr key={ planet }>\n              <td key={ planet.name }>{ planet.name }</td>\n              <td key={ planet.rotation_period }>{ planet.rotation_period }</td>\n              <td key={ planet.orbital_period }>{ planet.orbital_period }</td>\n              <td key={ planet.diameter }>{ planet.diameter }</td>\n              <td key={ planet.climate }>{ planet.climate }</td>\n              <td key={ planet.gravity }>{ planet.gravity }</td>\n              <td key={ planet.terraini }>{ planet.terrain }</td>\n              <td key={ planet.surface_water }>{ planet.surface_water }</td>\n              <td key={ planet.population }>{ planet.population }</td>\n              <td key={ planet.films }>{ planet.films }</td>\n              <td key={ planet.created }>{ planet.created }</td>\n              <td key={ planet.edited }>{ planet.edited }</td>\n              <td key={ planet.url }>{ planet.url }</td>\n            </tr>\n          ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport '../style/search.css';\n\nfunction SearchInput() {\n  const { getFilterName } = useContext(StarWarsContext);\n\n  return (\n    <div>\n      <div className=\"title\">\n        <h1>StarWars DataTable</h1>\n      </div>\n      <div className=\"input-name-div\">\n        <label className=\"labelName\" htmlFor=\"name-filter\">\n          Search by name:\n        <input\n            className=\"inputName\"\n            name=\"name-filter\"\n            data-testid=\"name-filter\"\n            type=\"text\"\n            onChange={({ target }) => getFilterName(target.value)}\n          />\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default SearchInput;\n","import React, { useContext, useState } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport '../style/comparison.css';\n\nfunction ComparisonInputs() {\n  const magic = 0;\n  const { setFilters, filters } = useContext(StarWarsContext);\n  const [localColumn, setLocalColumn] = useState('');\n  const [localComparison, setLocalComparison] = useState('');\n  const [localValue, setLocalValue] = useState(magic);\n\n  const setLocalState = () => {\n    setFilters({\n      ...filters,\n      filterByNumericValues: [\n        {\n          column: localColumn,\n          comparison: localComparison,\n          value: localValue,\n        },\n      ],\n    });\n  };\n\n  const reset = () => {\n    setFilters({\n      ...filters,\n      filterByNumericValues: [\n        {\n          column: '',\n          comparison: '',\n          value: '',\n        },\n      ],\n    });\n    setLocalColumn('');\n    setLocalComparison('');\n    setLocalValue('');\n  }\n\n  return (\n    <div data-testid=\"filter\">\n      <select\n        className=\"select\"\n        data-testid=\"column-filter\"\n        onChange={({ target }) => setLocalColumn(target.value)}\n        value={localColumn}\n      >\n        <option>population</option>\n        <option>orbital_period</option>\n        <option>diameter</option>\n        <option>rotation_period</option>\n        <option>surface_water</option>\n      </select>\n      <select\n        className=\"select\"\n        data-testid=\"comparison-filter\"\n        onChange={({ target }) => setLocalComparison(target.value)}\n        value={localComparison}\n      >\n        <option>Larger Then</option>\n        <option>Smaller Than</option>\n        <option>Equal To</option>\n      </select>\n      <input\n        className=\"inputComparison\"\n        data-testid=\"value-filter\"\n        type=\"number\"\n        onChange={({ target }) => setLocalValue(target.value)}\n        value={ localValue }\n      />\n      <button\n        data-testid=\"filter\"\n        type=\"button\"\n        onClick={() => reset()}\n      >\n        Reset Filter\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"button-filter\"\n        onClick={setLocalState}\n      >\n        Add Filter\n      </button>\n    </div>\n  );\n}\n\nexport default ComparisonInputs;\n","import React from 'react';\nimport './App.css';\nimport StarWarsProvider from './context/StarWarsProvider';\nimport Table from './components/Table';\nimport SearchInput from './components/SearchImput';\nimport ComparisonInputs from './components/ComparisonInput';\n\nfunction App() {\n  return (\n    <div>\n      <StarWarsProvider>\n        <SearchInput />\n        <ComparisonInputs />\n        <Table />\n      </StarWarsProvider>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}